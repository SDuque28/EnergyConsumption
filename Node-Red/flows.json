[
    {
        "id": "2a2cc906a03e0859",
        "type": "tab",
        "label": "Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9637394d2b7e86d8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e6aca9683aa7c3ae",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0d5673",
                "baseFont": "Palatino Linotype,Palatino,Book Antiqua,serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#041f20",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0d5673",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0d5673",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1589b8",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0d5673",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Palatino Linotype,Palatino,Book Antiqua,serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ba3d2f007efc9ec3",
        "type": "postgreSQLConfig",
        "name": "PostgresServer",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "EnergyConsumption",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "KinKon28",
        "passwordFieldType": "str"
    },
    {
        "id": "b9d366f18ff7ae74",
        "type": "ui_group",
        "name": "Busqueda por Fecha",
        "tab": "ffba43d73860d25d",
        "order": 1,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ffba43d73860d25d",
        "type": "ui_tab",
        "name": "Pagina 2",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8b98e8959a6c30e0",
        "type": "ui_group",
        "name": "Consumo ",
        "tab": "eefbea6e8dbb0b17",
        "order": 2,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eefbea6e8dbb0b17",
        "type": "ui_tab",
        "name": "Pagina 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c2b84d8c0b2973e9",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 1,
        "width": 10,
        "height": 1
    },
    {
        "id": "38fa1059d245e539",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "5c9fde6ef95db013",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "25acb4852e92d81f",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "62e9c2e2f3109bc9",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "795f31039f9152d5",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "3d159d577c8cee8b",
        "type": "mqtt in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "topic": "val1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9637394d2b7e86d8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "e95c3673179b7cee"
            ]
        ]
    },
    {
        "id": "030ac9abf4922b4a",
        "type": "postgresql",
        "z": "2a2cc906a03e0859",
        "name": "Insert_data",
        "query": "INSERT INTO  \"LogSensor\" (\"Date\",\"Time\",\"Gap\",\"Grp\",\"Voltage\",\"Gi\",\"Sm1\",\"Sm2\",\"Sm3\")\nVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);",
        "postgreSQLConfig": "ba3d2f007efc9ec3",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 810,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e95c3673179b7cee",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 12",
        "func": "var fecha = msg.payload.Date; \nvar hora = msg.payload.Time; \nvar Gap = msg.payload.Gap;\nvar Grp = msg.payload.Grp;\nvar Voltage = msg.payload.Voltage;\nvar Gi = msg.payload.Gi;\nvar Sm1 = msg.payload.Sm1;\nvar Sm2 = msg.payload.Sm2;\nvar Sm3 = msg.payload.Sm3;\n\nvar params = [fecha, hora, Gap, Grp, Voltage, Gi, Sm1, Sm2, Sm3];\n\nmsg.params = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "030ac9abf4922b4a",
                "843dca9f18a4f94b"
            ]
        ]
    },
    {
        "id": "843dca9f18a4f94b",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "02fe2a4ab42b753a",
        "type": "join",
        "z": "2a2cc906a03e0859",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "83f870fd8001160d",
                "bd99d9ab2fd79fe8"
            ]
        ]
    },
    {
        "id": "da05e606acc940e4",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Idate",
        "group": "b9d366f18ff7ae74",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "topic": "idate",
        "topicType": "str",
        "className": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "02fe2a4ab42b753a",
                "369b632d07016728"
            ]
        ]
    },
    {
        "id": "bf444604e323fbeb",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "DBG_FDATE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 400,
        "wires": []
    },
    {
        "id": "72933801a449347b",
        "type": "postgresql",
        "z": "2a2cc906a03e0859",
        "name": "SelectData_ByDate",
        "query": "SELECT * \n FROM \"LogSensor\"\n WHERE \"Date\" >= ($1) \n AND \"Date\" < ($2)  \n ORDER BY \"Date\";",
        "postgreSQLConfig": "ba3d2f007efc9ec3",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 750,
        "y": 320,
        "wires": [
            [
                "ffe8710c31a7e27d",
                "20d2a3361c164fc5",
                "3afc0da11b9dc3cd",
                "5a526403d33357ac"
            ]
        ]
    },
    {
        "id": "03a2e7a5f1423e74",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Fdate",
        "group": "b9d366f18ff7ae74",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "topic": "fdate",
        "topicType": "str",
        "className": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "bf444604e323fbeb",
                "02fe2a4ab42b753a"
            ]
        ]
    },
    {
        "id": "369b632d07016728",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "DBG_IDATE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "83f870fd8001160d",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "bd99d9ab2fd79fe8",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 14",
        "func": "var idateMillis = msg.payload.idate;\nvar fdateMillis = msg.payload.fdate;\n\nvar idate = new Date(idateMillis)\n                .toISOString().slice(0, 10);\nvar fdate = new Date(fdateMillis)\n                .toISOString().slice(0, 10);\n\nmsg.params = [idate,fdate];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "72933801a449347b"
            ]
        ]
    },
    {
        "id": "4abe5f17d6580312",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef8051b059eaa9b6",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 8,
        "width": 12,
        "height": 5,
        "label": "Global Active Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e5cfb26bd3263874",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "b9d366f18ff7ae74",
        "order": 2,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Digite una Fecha",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#000000",
        "x": 550,
        "y": 400,
        "wires": []
    },
    {
        "id": "ffe8710c31a7e27d",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 15",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Gap = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Gap;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Gap.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Gap\");\ndata.push(Gap);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 300,
        "wires": [
            [
                "ef8051b059eaa9b6"
            ]
        ]
    },
    {
        "id": "20d2a3361c164fc5",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 16",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Grp = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Grp;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Grp.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Grp\");\ndata.push(Grp);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 240,
        "wires": [
            [
                "be6c970e8e961511",
                "4abe5f17d6580312"
            ]
        ]
    },
    {
        "id": "be6c970e8e961511",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 11,
        "width": 12,
        "height": 5,
        "label": "Global Reactive Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1180,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f3529d8099b3d4fe",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 9,
        "width": 12,
        "height": 5,
        "label": "Voltage",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1140,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3afc0da11b9dc3cd",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 17",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Voltage = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Voltage;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Voltage.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Voltage\");\ndata.push(Voltage);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 360,
        "wires": [
            [
                "f3529d8099b3d4fe"
            ]
        ]
    },
    {
        "id": "82fe89c9e21f14b9",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 10,
        "width": 12,
        "height": 5,
        "label": "Global Intensity",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1160,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5a526403d33357ac",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 18",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Gi = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Gi;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Gi.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Global Intensity\");\ndata.push(Gi);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 420,
        "wires": [
            [
                "82fe89c9e21f14b9"
            ]
        ]
    },
    {
        "id": "e44ea715d21ae12d",
        "type": "mqtt in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "topic": "val2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9637394d2b7e86d8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 500,
        "wires": [
            [
                "dd08f5b69dd13ef2"
            ]
        ]
    },
    {
        "id": "255bd51e4788cfa7",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "8b98e8959a6c30e0",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Promedio por Hora",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "dd08f5b69dd13ef2",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 19",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 500,
        "wires": [
            [
                "255bd51e4788cfa7"
            ]
        ]
    },
    {
        "id": "f7d50bd0514b8cab",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\payload.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 475,
        "y": 560,
        "wires": [
            [
                "dd08f5b69dd13ef2",
                "f6e54e855d7d1beb",
                "1ce7fd498f204e16",
                "3a4d8ca0e4986e1e"
            ]
        ],
        "inputLabels": [
            "Data.JSON"
        ],
        "outputLabels": [
            "Data.JSON"
        ],
        "l": false
    },
    {
        "id": "1c5583ebf18d6816",
        "type": "inject",
        "z": "2a2cc906a03e0859",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 560,
        "wires": [
            [
                "f7d50bd0514b8cab"
            ]
        ]
    },
    {
        "id": "eda5c94f373802ce",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "",
        "label": " Horas de Mayor Consumo:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#000000",
        "x": 580,
        "y": 440,
        "wires": []
    },
    {
        "id": "f6e54e855d7d1beb",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 20",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = msg.payload.maxValues[0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": [
            [
                "727583b25dde3406"
            ]
        ]
    },
    {
        "id": "727583b25dde3406",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter1: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 810,
        "y": 540,
        "wires": []
    },
    {
        "id": "1ce7fd498f204e16",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 21",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = msg.payload.maxValues[1];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 580,
        "wires": [
            [
                "ebe0ad7c66182aae"
            ]
        ]
    },
    {
        "id": "ebe0ad7c66182aae",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 6,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter2: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "3a4d8ca0e4986e1e",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 22",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = msg.payload.maxValues[2];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "ba951ecd7de6a002"
            ]
        ]
    },
    {
        "id": "ba951ecd7de6a002",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter3: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 810,
        "y": 620,
        "wires": []
    }
]