[
    {
        "id": "2a2cc906a03e0859",
        "type": "tab",
        "label": "Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3d159d577c8cee8b",
        "type": "mqtt in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "topic": "val1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9637394d2b7e86d8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "e95c3673179b7cee"
            ]
        ]
    },
    {
        "id": "030ac9abf4922b4a",
        "type": "postgresql",
        "z": "2a2cc906a03e0859",
        "name": "Insert_data",
        "query": "INSERT INTO  \"LogSensor\" (\"Date\",\"Time\",\"Gap\",\"Grp\",\"Voltage\",\"Gi\",\"Sm1\",\"Sm2\",\"Sm3\")\nVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);",
        "postgreSQLConfig": "ba3d2f007efc9ec3",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 450,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e95c3673179b7cee",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 12",
        "func": "var fecha = msg.payload.Date; \nvar hora = msg.payload.Time; \nvar Gap = msg.payload.Gap;\nvar Grp = msg.payload.Grp;\nvar Voltage = msg.payload.Voltage;\nvar Gi = msg.payload.Gi;\nvar Sm1 = msg.payload.Sm1;\nvar Sm2 = msg.payload.Sm2;\nvar Sm3 = msg.payload.Sm3;\n\nvar params = [fecha, hora, Gap, Grp, Voltage, Gi, Sm1, Sm2, Sm3];\n\nmsg.params = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "030ac9abf4922b4a"
            ]
        ]
    },
    {
        "id": "02fe2a4ab42b753a",
        "type": "join",
        "z": "2a2cc906a03e0859",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "bd99d9ab2fd79fe8"
            ]
        ]
    },
    {
        "id": "da05e606acc940e4",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Idate",
        "group": "b9d366f18ff7ae74",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "topic": "idate",
        "topicType": "str",
        "className": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "02fe2a4ab42b753a"
            ]
        ]
    },
    {
        "id": "72933801a449347b",
        "type": "postgresql",
        "z": "2a2cc906a03e0859",
        "name": "SelectData_ByDate",
        "query": "SELECT * \n FROM \"LogSensor\"\n WHERE \"Date\" >= ($1) \n AND \"Date\" < ($2)  \n ORDER BY \"Date\";",
        "postgreSQLConfig": "ba3d2f007efc9ec3",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 710,
        "y": 340,
        "wires": [
            [
                "ffe8710c31a7e27d",
                "20d2a3361c164fc5",
                "3afc0da11b9dc3cd",
                "5a526403d33357ac"
            ]
        ]
    },
    {
        "id": "03a2e7a5f1423e74",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Fdate",
        "group": "b9d366f18ff7ae74",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "topic": "fdate",
        "topicType": "str",
        "className": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "02fe2a4ab42b753a"
            ]
        ]
    },
    {
        "id": "83f870fd8001160d",
        "type": "debug",
        "z": "2a2cc906a03e0859",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "bd99d9ab2fd79fe8",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 14",
        "func": "var idateMillis = msg.payload.idate;\nvar fdateMillis = msg.payload.fdate;\n\nvar idate = new Date(idateMillis)\n                .toISOString().slice(0, 10);\nvar fdate = new Date(fdateMillis)\n                .toISOString().slice(0, 10);\n\nmsg.params = [idate,fdate];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "72933801a449347b",
                "83f870fd8001160d"
            ]
        ]
    },
    {
        "id": "ef8051b059eaa9b6",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 8,
        "width": 12,
        "height": 5,
        "label": "Global Active Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1160,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e5cfb26bd3263874",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "b9d366f18ff7ae74",
        "order": 2,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Digite una Fecha",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#000000",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "ffe8710c31a7e27d",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 15",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Gap = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Gap;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Gap.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Gap\");\ndata.push(Gap);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 320,
        "wires": [
            [
                "ef8051b059eaa9b6"
            ]
        ]
    },
    {
        "id": "20d2a3361c164fc5",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 16",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Grp = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Grp;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Grp.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Grp\");\ndata.push(Grp);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "be6c970e8e961511"
            ]
        ]
    },
    {
        "id": "be6c970e8e961511",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 11,
        "width": 12,
        "height": 5,
        "label": "Global Reactive Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1160,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f3529d8099b3d4fe",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 9,
        "width": 12,
        "height": 5,
        "label": "Voltage",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3afc0da11b9dc3cd",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 17",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Voltage = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Voltage;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Voltage.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Voltage\");\ndata.push(Voltage);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 360,
        "wires": [
            [
                "f3529d8099b3d4fe"
            ]
        ]
    },
    {
        "id": "82fe89c9e21f14b9",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 10,
        "width": 12,
        "height": 5,
        "label": "Global Intensity",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#106eb1",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1140,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5a526403d33357ac",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 18",
        "func": "const datos = msg.payload;\nconst datosPorDia = {};\nconst labels = [], data = [], series = [];\nconst Gi = [];\n\n// Iterar sobre cada fila en los resultados\ndatos.forEach((fila) => {\n\n    // Obtener el nombre del día (sin la hora) de la fecha\n    const fecha = new Date(fila.Date);\n\n    // Formatear la fecha en formato \"dd/mm/aa\"\n    const dia = fecha.getDate().toString().padStart(2, '0');\n    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');\n    const anio = fecha.getFullYear().toString().slice(-2);\n    const claveDia = `${dia}/${mes}/${anio}`;\n\n    // Si aún no existe una entrada para este día, inicializar el valor acumulado y el contador\n    if (!datosPorDia[claveDia]) {\n        datosPorDia[claveDia] = { total: 0, contador: 0 };\n    }\n\n    // Actualizar el valor acumulado y el contador para este día\n    datosPorDia[claveDia].total += fila.Gi;\n    datosPorDia[claveDia].contador++;\n    \n});\n\n// Calcular el promedio de Global_active_power para cada día y almacenar en un objeto JSON\nObject.keys(datosPorDia).forEach((claveDia) => {\n    const promedio = datosPorDia[claveDia].total / datosPorDia[claveDia].contador;\n    Gi.push(promedio);\n    labels.push(claveDia);\n});\n\nseries.push(\"Global Intensity\");\ndata.push(Gi);\n\nconst datosJSON = {\n    \"labels\":labels,\n    \"data\":data,\n    \"series\":series\n};\n\n\n// Convertir el objeto JSON a una cadena JSON\nconst datosJSONString = JSON.stringify(datosJSON);\nmsg.payload = [datosJSON]\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "82fe89c9e21f14b9"
            ]
        ]
    },
    {
        "id": "255bd51e4788cfa7",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "d": true,
        "name": "",
        "group": "eb9f42f8f6cda554",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Promedio por Hora",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "f7d50bd0514b8cab",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "d": true,
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\payload.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 275,
        "y": 900,
        "wires": [
            [
                "f6e54e855d7d1beb"
            ]
        ],
        "inputLabels": [
            "Data.JSON"
        ],
        "outputLabels": [
            "Data.JSON"
        ],
        "l": false
    },
    {
        "id": "1c5583ebf18d6816",
        "type": "inject",
        "z": "2a2cc906a03e0859",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "f7d50bd0514b8cab"
            ]
        ]
    },
    {
        "id": "eda5c94f373802ce",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "d": true,
        "group": "eb9f42f8f6cda554",
        "order": 11,
        "width": 6,
        "height": 1,
        "name": "",
        "label": " Horas de Mayor Consumo:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#000000",
        "x": 220,
        "y": 860,
        "wires": []
    },
    {
        "id": "f6e54e855d7d1beb",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "d": true,
        "name": "function 20",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "727583b25dde3406",
                "ebe0ad7c66182aae",
                "ba951ecd7de6a002",
                "255bd51e4788cfa7"
            ]
        ]
    },
    {
        "id": "727583b25dde3406",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "d": true,
        "group": "eb9f42f8f6cda554",
        "order": 13,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter1: ",
        "format": "{{msg.payload.maxValues[0]}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 590,
        "y": 880,
        "wires": []
    },
    {
        "id": "ebe0ad7c66182aae",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "d": true,
        "group": "eb9f42f8f6cda554",
        "order": 14,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter2: ",
        "format": "{{msg.payload.maxValues[1]}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 590,
        "y": 920,
        "wires": []
    },
    {
        "id": "ba951ecd7de6a002",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "d": true,
        "group": "eb9f42f8f6cda554",
        "order": 15,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Submeter3: ",
        "format": "{{msg.payload.maxValues[2]}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#000000",
        "x": 590,
        "y": 960,
        "wires": []
    },
    {
        "id": "f8e5193bab848aee",
        "type": "ui_dropdown",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Variables_a_Analizar",
        "tooltip": "",
        "place": "Seleccion",
        "group": "8b98e8959a6c30e0",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": true,
        "options": [
            {
                "label": "Reactive Power",
                "value": "Grp",
                "type": "str"
            },
            {
                "label": "Active Power",
                "value": "Gap",
                "type": "str"
            },
            {
                "label": "Voltage",
                "value": "Voltage",
                "type": "str"
            },
            {
                "label": "Intensity",
                "value": "Gi",
                "type": "str"
            },
            {
                "label": "SubMeter1",
                "value": "Sm1",
                "type": "str"
            },
            {
                "label": "SubMeter2",
                "value": "Sm2",
                "type": "str"
            },
            {
                "label": "SubMeter3",
                "value": "Sm3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "39f08db9289a80cd"
            ]
        ]
    },
    {
        "id": "e68aa7fce5400e63",
        "type": "ui_dropdown",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Tipo_de_ Analisis",
        "tooltip": "",
        "place": "Seleccion",
        "group": "8b98e8959a6c30e0",
        "order": 4,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Dia",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Semana",
                "value": 7,
                "type": "num"
            },
            {
                "label": "Mes",
                "value": 30,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 430,
        "y": 480,
        "wires": [
            [
                "39f08db9289a80cd"
            ]
        ]
    },
    {
        "id": "7c014b34507ccd66",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 6,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Rango de Fechas a Analizar",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "24",
        "color": "#000000",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "bed6aa914ddd6bd3",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Fecha_Inicial",
        "group": "8b98e8959a6c30e0",
        "order": 8,
        "width": 7,
        "height": 1,
        "passthru": true,
        "topic": "idate",
        "topicType": "str",
        "className": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "6727cfd494a8d1a2"
            ]
        ]
    },
    {
        "id": "34e7e81244007450",
        "type": "ui_date_picker",
        "z": "2a2cc906a03e0859",
        "name": "",
        "label": "Fecha_Final",
        "group": "8b98e8959a6c30e0",
        "order": 9,
        "width": 7,
        "height": 1,
        "passthru": true,
        "topic": "fdate",
        "topicType": "str",
        "className": "",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "6727cfd494a8d1a2"
            ]
        ]
    },
    {
        "id": "6727cfd494a8d1a2",
        "type": "join",
        "z": "2a2cc906a03e0859",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 310,
        "y": 520,
        "wires": [
            [
                "29bc6a9518622bed"
            ]
        ]
    },
    {
        "id": "39f08db9289a80cd",
        "type": "join",
        "z": "2a2cc906a03e0859",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 480,
        "wires": [
            [
                "a143b6bc48a2f1a6"
            ]
        ]
    },
    {
        "id": "29bc6a9518622bed",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 25",
        "func": "var idateMillis = msg.payload.idate;\nvar fdateMillis = msg.payload.fdate;\n\nvar idate = new Date(idateMillis)\n                .toISOString().slice(0, 10);\nvar fdate = new Date(fdateMillis)\n                .toISOString().slice(0, 10);\n\nmsg.params = [idate,fdate];\nmsg.payload = msg.params\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "39f08db9289a80cd",
                "2b82f3146b615aa2",
                "fcacc518ab9de659"
            ]
        ]
    },
    {
        "id": "4cfde982be02f1f8",
        "type": "pythonshell in",
        "z": "2a2cc906a03e0859",
        "name": "Consultas",
        "pyfile": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\consults.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 940,
        "y": 500,
        "wires": [
            [
                "4d78cb0a208da398"
            ]
        ]
    },
    {
        "id": "a143b6bc48a2f1a6",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 26",
        "func": "//msg.params = [msg.payload[1], msg.payload[2]]\nmsg.params = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 480,
        "wires": [
            [
                "4cfde982be02f1f8",
                "f62b9034d17364ea"
            ]
        ]
    },
    {
        "id": "7c110afcb4788d11",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 2,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Variables y Tipo de Análisis",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "24",
        "color": "#000000",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "4d78cb0a208da398",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\data.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 1075,
        "y": 520,
        "wires": [
            [
                "23fdc2f70a0acf91",
                "a673a460f76c181b"
            ]
        ],
        "inputLabels": [
            "Data.JSON"
        ],
        "outputLabels": [
            "Data.JSON"
        ],
        "l": false
    },
    {
        "id": "1f1fd754e9566d2d",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "name": "",
        "group": "8b98e8959a6c30e0",
        "order": 14,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1370,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "78d41fd2cc5d3af5",
        "type": "inject",
        "z": "2a2cc906a03e0859",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 540,
        "wires": [
            [
                "4d78cb0a208da398"
            ]
        ]
    },
    {
        "id": "23fdc2f70a0acf91",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 27",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.payload = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 500,
        "wires": [
            [
                "1f1fd754e9566d2d"
            ]
        ]
    },
    {
        "id": "f0e0e95fec0b3342",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "8b98e8959a6c30e0",
        "order": 12,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Promedio en ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#000000",
        "x": 1210,
        "y": 460,
        "wires": []
    },
    {
        "id": "f62b9034d17364ea",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 28",
        "func": "var valor = msg.payload[1];\n\n// Verificar el valor del medio\nif (valor === 1) {\n    msg.payload = \"un Dia\";\n} else if (valor === 7) {\n    msg.payload = \"una Semana\";\n} else if (valor === 30) {\n    msg.payload = \"un Mes\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 460,
        "wires": [
            [
                "f0e0e95fec0b3342"
            ]
        ]
    },
    {
        "id": "409f91597b31c334",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "264021cecb64e1e7",
        "order": 3,
        "width": 4,
        "height": 4,
        "name": "",
        "label": "Promedios",
        "format": "<p>{{value}}</p>",
        "layout": "col-center",
        "className": "top-left-align",
        "style": true,
        "font": "Lucida Sans Unicode,Lucida Grande,sans-serif",
        "fontSize": "16",
        "color": "#000000",
        "x": 1550,
        "y": 540,
        "wires": []
    },
    {
        "id": "0dbd1e190e4a2602",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 29",
        "func": "msg.payload = msg.payload.Promedio\nmsg.payload = msg.payload.replace(/\\n/g, '<br>');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 540,
        "wires": [
            [
                "409f91597b31c334"
            ]
        ]
    },
    {
        "id": "a673a460f76c181b",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 30",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 600,
        "wires": [
            [
                "0dbd1e190e4a2602",
                "d6a7bb584ec773b3",
                "c1f645578cdd15a6",
                "a556952987d8462c"
            ]
        ]
    },
    {
        "id": "d6a7bb584ec773b3",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 31",
        "func": "msg.payload = msg.payload.Max\nmsg.payload = msg.payload.replace(/\\n/g, '<br>');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 580,
        "wires": [
            [
                "7fcc5048c68927d9"
            ]
        ]
    },
    {
        "id": "c1f645578cdd15a6",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 32",
        "func": "msg.payload = msg.payload.Min\nmsg.payload = msg.payload.replace(/\\n/g, '<br>');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 620,
        "wires": [
            [
                "22cded997c3e85e5"
            ]
        ]
    },
    {
        "id": "7fcc5048c68927d9",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "264021cecb64e1e7",
        "order": 1,
        "width": 4,
        "height": 4,
        "name": "",
        "label": "Maximos",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Lucida Sans Unicode,Lucida Grande,sans-serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1540,
        "y": 580,
        "wires": []
    },
    {
        "id": "22cded997c3e85e5",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "264021cecb64e1e7",
        "order": 2,
        "width": 4,
        "height": 4,
        "name": "",
        "label": "Minimos",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Lucida Sans Unicode,Lucida Grande,sans-serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1540,
        "y": 620,
        "wires": []
    },
    {
        "id": "a556952987d8462c",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 33",
        "func": "msg.payload = msg.payload.STD\nmsg.payload = msg.payload.replace(/\\n/g, '<br>');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 660,
        "wires": [
            [
                "1b6a34b8b6c86969"
            ]
        ]
    },
    {
        "id": "1b6a34b8b6c86969",
        "type": "ui_text",
        "z": "2a2cc906a03e0859",
        "group": "264021cecb64e1e7",
        "order": 4,
        "width": 4,
        "height": 4,
        "name": "",
        "label": "Desviación Est.",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Lucida Sans Unicode,Lucida Grande,sans-serif",
        "fontSize": 16,
        "color": "#000000",
        "x": 1560,
        "y": 660,
        "wires": []
    },
    {
        "id": "062dd2906fa8caf9",
        "type": "mqtt in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "topic": "val2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9637394d2b7e86d8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "3c824960866394cd"
            ]
        ]
    },
    {
        "id": "3c824960866394cd",
        "type": "ui_chart",
        "z": "2a2cc906a03e0859",
        "d": true,
        "name": "",
        "group": "b9d366f18ff7ae74",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2b82f3146b615aa2",
        "type": "pythonshell in",
        "z": "2a2cc906a03e0859",
        "name": "pychart",
        "pyfile": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\pieChart.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 660,
        "y": 560,
        "wires": [
            [
                "25d85fca71276a18",
                "ab347ad434617276",
                "8ebfea2bd9707ebe",
                "1f7e94e4532c65fa"
            ]
        ]
    },
    {
        "id": "25d85fca71276a18",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\pie1.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 805,
        "y": 560,
        "wires": [
            [
                "663662f1d2503934"
            ]
        ],
        "l": false
    },
    {
        "id": "ab347ad434617276",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\pie2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 805,
        "y": 600,
        "wires": [
            [
                "cd47d4850f3930c6"
            ]
        ],
        "l": false
    },
    {
        "id": "8ebfea2bd9707ebe",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\pie3.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 805,
        "y": 640,
        "wires": [
            [
                "419d3b9364015d33"
            ]
        ],
        "l": false
    },
    {
        "id": "663662f1d2503934",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 34",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 580,
        "wires": [
            [
                "09284fe9cd7e617b"
            ]
        ]
    },
    {
        "id": "cd47d4850f3930c6",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 35",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 2\n//msg.payload = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 620,
        "wires": [
            [
                "bcac2dc869eddd97"
            ]
        ]
    },
    {
        "id": "419d3b9364015d33",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 36",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 3\n//msg.payload = [msg.payload]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 660,
        "wires": [
            [
                "f18906809e0052cf"
            ]
        ]
    },
    {
        "id": "b2f2c593a767d881",
        "type": "inject",
        "z": "2a2cc906a03e0859",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 620,
        "wires": [
            [
                "25d85fca71276a18",
                "ab347ad434617276",
                "8ebfea2bd9707ebe",
                "1f7e94e4532c65fa"
            ]
        ]
    },
    {
        "id": "09284fe9cd7e617b",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "8c7fce8cfeef3eb1",
        "name": "Zona 1 vs Zona 2",
        "order": 1,
        "width": 8,
        "height": 8,
        "format": "<!-- Nodo 1 -->\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myPieChart1\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx1 = document.getElementById('myPieChart1').getContext('2d');\n    var myPieChart1;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart1(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    data: data,\n                    backgroundColor: [\n                        'rgb(206, 44, 47)', // Color para la primera serie\n                        'rgb(250,132,23)', // Color para la segunda serie\n                        'rgb(49, 154, 250)', // Color para la tercera serie (y así sucesivamente)\n                    ]\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myPieChart1) {\n                myPieChart1.destroy();\n            }\n\n            myPieChart1 = new Chart(ctx1, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Zona 1 vs Zona 2', // Título del gráfico\n                        fontSize: 24\n                        },\n                    legend: {\n                        display: true,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart1(newVal);\n        }\n    });\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1065,
        "y": 580,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "bcac2dc869eddd97",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "8c7fce8cfeef3eb1",
        "name": "Zona 1 vs Zona 3",
        "order": 2,
        "width": 8,
        "height": 8,
        "format": "<!-- Nodo 2 -->\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myPieChart2\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx2 = document.getElementById('myPieChart2').getContext('2d');\n    var myPieChart2;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart2(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    data: data,\n                    backgroundColor: [\n                        'rgb(206, 44, 47)', // Color para la primera serie\n                        'rgb(250,132,23)', // Color para la segunda serie\n                        'rgb(49, 154, 250)',   // Color para la tercera serie (y así sucesivamente)\n                    ]\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myPieChart2) {\n                myPieChart2.destroy();\n            }\n\n            myPieChart2 = new Chart(ctx2, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Zona 1 vs Zona 3', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: true,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart2(newVal);\n        }\n    });\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1065,
        "y": 620,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "f18906809e0052cf",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "8c7fce8cfeef3eb1",
        "name": "Zona 2 vs Zona 3",
        "order": 3,
        "width": 8,
        "height": 8,
        "format": "<!-- Nodo 3 -->\n<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myPieChart3\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx3 = document.getElementById('myPieChart3').getContext('2d');\n    var myPieChart3;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart3(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    data: data,\n                    backgroundColor: [\n                        'rgb(206, 44,  47)', // Color para la primera serie\n                        'rgb(250,132,23)', // Color para la segunda serie\n                        'rgb(49, 154, 250)',   // Color para la tercera serie (y así sucesivamente)\n                    ]\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myPieChart3) {\n                myPieChart3.destroy();\n            }\n\n            myPieChart3 = new Chart(ctx3, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Zona 2 vs Zona 3', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: true,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart3(newVal);\n        }\n    });\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1065,
        "y": 660,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "1f7e94e4532c65fa",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\data.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 805,
        "y": 680,
        "wires": [
            [
                "af6783201c7b18ab"
            ]
        ],
        "l": false
    },
    {
        "id": "af6783201c7b18ab",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "0e6efa4432b38006",
        "name": "Correlación",
        "order": 1,
        "width": 16,
        "height": 10,
        "format": "<script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n\n<div id=\"correlationPlot\" style=\"width: 100%; height: 400%;\"></div>\n\n<script>\n    // Función para procesar los datos de correlación desde el mensaje (archivo de texto)\n    function processData(payload) {\n        try {\n            // Nombres de las columnas definidas\n            var columnNames = ['Global_reactive_power', 'Global_active_power', 'Voltage', 'Global_intensity', 'Global_apparent_power', 'Power_factor'];\n            \n            // Dividir el payload en líneas\n            var lines = payload.trim().split('\\n');\n\n            // Crear la matriz de correlación\n            var correlationMatrix = [];\n            for (var i = 1; i < lines.length; i++) {\n                var rowData = lines[i].trim().split('\\t');\n                var rowValues = rowData.slice(1).map(parseFloat); // Convertir los valores a números\n                correlationMatrix.push(rowValues);\n            }\n\n            // Configuración del gráfico de matriz de correlación con Plotly.js\n            var plotData = [{\n                z: correlationMatrix,\n                x: columnNames, // Nombres de las columnas como etiquetas del eje x\n                y: columnNames, // Nombres de las columnas como etiquetas del eje y\n                type: 'heatmap',\n                colorscale: 'RdBu', // Esquema de color (caliente a frío)\n                reversescale: false, // No invertir el esquema de color\n                hoverongaps: false,\n                showscale: true,\n                colorbar: {\n                    thickness: 20,\n                    tickformat: '.2f', // Formato de dos decimales para los ticks del colorbar\n                    tickmode: 'array',\n                    ticks: 'inside', // Colocar los ticks dentro del colorbar\n                    tickvals: [-0.5, 0, 0.5, 1], // Valores de los ticks del colorbar\n                    ticktext: ['-0.5', '0', '0.5', '1'] // Textos de los ticks del colorbar\n                },\n                zmin: -0.5, // Valor mínimo de correlación\n                zmax: 1 // Valor máximo de correlación\n            }];\n\n            // Configuración del diseño del gráfico\n            var layout = {\n                title: {\n                    text: 'Diagrama de Correlación entre Variables',\n                    font: {\n                        size: 24, // Tamaño del título\n                        weight: 'bold' // Peso del título (negrita)\n                    }\n                },\n                margin: { t: 50, l: 110, r: 50, b: 110 },\n                xaxis: { tickangle: -45 },\n                yaxis: { tickangle: -45 },\n                annotations: [] // Arreglo vacío para almacenar las anotaciones\n            };\n\n            // Configuración del gráfico interactivo con Plotly.js\n            var config = {\n                responsive: true,\n                displayModeBar: false // Desactivar la barra de herramientas de interacción (zoom, mover, etc.)\n            };\n\n            // Agregar anotaciones para mostrar los valores de z dentro de cada celda\n            for (var i = 0; i < plotData[0].y.length; i++) {\n                for (var j = 0; j < plotData[0].x.length; j++) {\n                    var annotation = {\n                        x: plotData[0].x[j],\n                        y: plotData[0].y[i],\n                        text: plotData[0].z[i][j].toFixed(2), // Valor de z formateado a dos decimales\n                        font: { color: 'white' }, // Color del texto de la anotación\n                        showarrow: false\n                    };\n                    layout.annotations.push(annotation);\n                }\n            }\n\n            // Obtener el tamaño del contenedor del nodo ui_template\n            var container = document.getElementById('correlationPlot');\n            var width = container.clientWidth;\n            var height = container.clientHeight;\n\n            // Renderizar el gráfico de correlación con Plotly.js\n            Plotly.newPlot('correlationPlot', plotData, layout, config);\n        } catch (error) {\n            console.error('Error al procesar los datos de correlación:', error);\n        }\n    }\n\n    // Llamar a la función processData cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            processData(newVal);\n        }\n    });\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fcacc518ab9de659",
        "type": "pythonshell in",
        "z": "2a2cc906a03e0859",
        "name": "histogram",
        "pyfile": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\histogram.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 640,
        "y": 740,
        "wires": [
            [
                "89df0e92e906d968",
                "e07a2f658422f2bc",
                "4d6d91ce03e01ab8",
                "fbdcae1694f2f05e",
                "eb52b2352d16361c",
                "7c01889e1c05854b",
                "c53163057a690e97",
                "b331464a589a3324",
                "8fe38807633d1f0e"
            ]
        ]
    },
    {
        "id": "89df0e92e906d968",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Global_active_power.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 785,
        "y": 740,
        "wires": [
            [
                "12ec2e66c85528d6"
            ]
        ],
        "l": false
    },
    {
        "id": "447af9420faa0847",
        "type": "inject",
        "z": "2a2cc906a03e0859",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 800,
        "wires": [
            [
                "89df0e92e906d968",
                "e07a2f658422f2bc",
                "4d6d91ce03e01ab8",
                "fbdcae1694f2f05e",
                "eb52b2352d16361c",
                "7c01889e1c05854b",
                "c53163057a690e97",
                "8fe38807633d1f0e",
                "b331464a589a3324"
            ]
        ]
    },
    {
        "id": "45cce620a5a433e5",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Global Active Power",
        "order": 1,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart1\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx4= document.getElementById('myBarChart1').getContext('2d');\n    var myBarChart1;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart4(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart1) {\n                myBarChart1.destroy();\n            }\n\n            myBarChart1 = new Chart(ctx4, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Global Active Power', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart4(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "12ec2e66c85528d6",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 47",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 'topic1';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 740,
        "wires": [
            [
                "45cce620a5a433e5"
            ]
        ]
    },
    {
        "id": "e07a2f658422f2bc",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Global_reactive_power.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 825,
        "y": 760,
        "wires": [
            [
                "2835f109d10636d0"
            ]
        ],
        "l": false
    },
    {
        "id": "2835f109d10636d0",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 48",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 'topic2';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 760,
        "wires": [
            [
                "c37b63353dc2e6ca"
            ]
        ]
    },
    {
        "id": "c37b63353dc2e6ca",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Global Reactive Power",
        "order": 2,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart2\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx5 = document.getElementById('myBarChart2').getContext('2d');\n    var myBarChart2;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart5(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart2) {\n                myBarChart2.destroy();\n            }\n\n            myBarChart2 = new Chart(ctx5, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Global Active Power', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart5(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1520,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "4d6d91ce03e01ab8",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Voltage.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 785,
        "y": 780,
        "wires": [
            [
                "b50bdeeedf9296da"
            ]
        ],
        "l": false
    },
    {
        "id": "b50bdeeedf9296da",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 49",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = 'topic3';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 780,
        "wires": [
            [
                "a2b24dc6e9bfd1da"
            ]
        ]
    },
    {
        "id": "a2b24dc6e9bfd1da",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Voltage",
        "order": 9,
        "width": 24,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart3\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx6 = document.getElementById('myBarChart3').getContext('2d');\n    var myBarChart3;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart6(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart3) {\n                myBarChart3.destroy();\n            }\n\n            myBarChart3 = new Chart(ctx6, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Voltage', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart6(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1260,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "fbdcae1694f2f05e",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Global_intensity.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 825,
        "y": 800,
        "wires": [
            [
                "b1f2cbc3635a645f"
            ]
        ],
        "l": false
    },
    {
        "id": "b1f2cbc3635a645f",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 50",
        "func": "msg.payload = JSON.parse(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1107,
        "y": 801,
        "wires": [
            [
                "8f64dde792e0342f"
            ]
        ]
    },
    {
        "id": "8f64dde792e0342f",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Global Intensity",
        "order": 3,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart4\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx7 = document.getElementById('myBarChart4').getContext('2d');\n    var myBarChart4;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart7(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart4) {\n                myBarChart4.destroy();\n            }\n\n            myBarChart4 = new Chart(ctx7, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Global Intensity', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart7(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1520,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "c53163057a690e97",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Sub_metering_1.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 788,
        "y": 860,
        "wires": [
            [
                "de5994ee0ae41d23"
            ]
        ],
        "l": false
    },
    {
        "id": "de5994ee0ae41d23",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 51",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 860,
        "wires": [
            [
                "32526f6e2095b67a"
            ]
        ]
    },
    {
        "id": "6a19b43c6e86da2c",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Global Apparent Power",
        "order": 5,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart5\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx8 = document.getElementById('myBarChart5').getContext('2d');\n    var myBarChart5;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart8(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart5) {\n                myBarChart5.destroy();\n            }\n\n            myBarChart5 = new Chart(ctx8, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Global Apparent Power', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart8(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "24467074dfdc9824",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 52",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 820,
        "wires": [
            [
                "6a19b43c6e86da2c"
            ]
        ]
    },
    {
        "id": "eb52b2352d16361c",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Global_apparent_power.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 788,
        "y": 819,
        "wires": [
            [
                "24467074dfdc9824"
            ]
        ],
        "l": false
    },
    {
        "id": "7c01889e1c05854b",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Power_factor.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 825,
        "y": 840,
        "wires": [
            [
                "bbc288cb9defaf16"
            ]
        ],
        "l": false
    },
    {
        "id": "bbc288cb9defaf16",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 53",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "844d7e240c582fa8"
            ]
        ]
    },
    {
        "id": "844d7e240c582fa8",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Power Factor",
        "order": 4,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart6\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx9 = document.getElementById('myBarChart6').getContext('2d');\n    var myBarChart6;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart9(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart6) {\n                myBarChart6.destroy();\n            }\n\n            myBarChart6 = new Chart(ctx9, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Global Apparent Power', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart9(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1510,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "32526f6e2095b67a",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Sub Metering 1",
        "order": 6,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart7\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx10 = document.getElementById('myBarChart7').getContext('2d');\n    var myBarChart7;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart10(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart7) {\n                myBarChart7.destroy();\n            }\n\n            myBarChart7 = new Chart(ctx10, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Sub Metering 1', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart10(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "8fe38807633d1f0e",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Sub_metering_2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 825,
        "y": 880,
        "wires": [
            [
                "8e519051be5c9e24"
            ]
        ],
        "l": false
    },
    {
        "id": "8e519051be5c9e24",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 54",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1107,
        "y": 881,
        "wires": [
            [
                "f36fa46bb0105793"
            ]
        ]
    },
    {
        "id": "f36fa46bb0105793",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Sub Metering 2",
        "order": 8,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart8\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx11 = document.getElementById('myBarChart8').getContext('2d');\n    var myBarChart8;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart11(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart8) {\n                myBarChart8.destroy();\n            }\n\n            myBarChart8 = new Chart(ctx11, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Sub Metering 2', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart11(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1460,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "b331464a589a3324",
        "type": "file in",
        "z": "2a2cc906a03e0859",
        "name": "",
        "filename": "C:\\Users\\Santiago D\\Documents\\Universidad\\2024-1\\Procesos 2\\Proyecto\\JSON\\Sub_metering_3.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 785,
        "y": 900,
        "wires": [
            [
                "a40430a0195c440b"
            ]
        ],
        "l": false
    },
    {
        "id": "a40430a0195c440b",
        "type": "function",
        "z": "2a2cc906a03e0859",
        "name": "function 55",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 900,
        "wires": [
            [
                "9a891d92a7724afa"
            ]
        ]
    },
    {
        "id": "9a891d92a7724afa",
        "type": "ui_template",
        "z": "2a2cc906a03e0859",
        "group": "ce1e0a01b8a63972",
        "name": "Sub Metering 3",
        "order": 7,
        "width": 12,
        "height": 8,
        "format": "<div style=\"width: 100%; height: 400px;\">\n    <canvas id=\"myBarChart9\"></canvas>\n</div>\n\n<script>\n    // Obtener el contexto del canvas\n    var ctx12 = document.getElementById('myBarChart9').getContext('2d');\n    var myBarChart9;\n\n    // Función para actualizar el gráfico con nuevos datos\n    function updateChart12(payload) {\n        try {\n            // Extraer datos relevantes del payload\n            var labels = payload.labels || [];\n            var data = payload.data || [];\n\n            // Crear objeto de datos para el gráfico de barras\n            var chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Data',\n                    data: data,\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            // Destruir el gráfico anterior (si existe) y crear uno nuevo con los datos actualizados\n            if (myBarChart9) {\n                myBarChart9.destroy();\n            }\n\n            myBarChart9 = new Chart(ctx12, {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: 'Sub Metering 3', // Título del gráfico\n                        fontSize: 24\n                    },\n                    legend: {\n                        display: false,\n                        position: 'bottom', // Posición de la leyenda (abajo)\n                        labels: {\n                            fontSize: 14\n                        }\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Error al procesar el payload JSON:', error);\n        }\n    }\n\n    // Llamar a la función de actualización del gráfico cuando se reciba un nuevo mensaje\n    scope.$watch('msg.payload', function(newVal, oldVal) {\n        if (newVal !== undefined) {\n            updateChart12(newVal);\n        }\n    });\n</script> ",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c2b84d8c0b2973e9",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 1,
        "width": 10,
        "height": 1
    },
    {
        "id": "38fa1059d245e539",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "5c9fde6ef95db013",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "25acb4852e92d81f",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "b9d366f18ff7ae74",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "2e0e26a9fc981aa5",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "0efdcca09cc6d7fb",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "198b109aa7a677f0",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "f13b84d601037e30",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad810629b5231eeb",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 11,
        "width": 6,
        "height": 1
    },
    {
        "id": "1b8c0eee71c5aacf",
        "type": "ui_spacer",
        "z": "2a2cc906a03e0859",
        "name": "spacer",
        "group": "8b98e8959a6c30e0",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "9637394d2b7e86d8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ba3d2f007efc9ec3",
        "type": "postgreSQLConfig",
        "name": "PostgresServer",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "EnergyConsumption",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "postgres",
        "passwordFieldType": "str"
    },
    {
        "id": "b9d366f18ff7ae74",
        "type": "ui_group",
        "name": "Busqueda por Fecha",
        "tab": "ffba43d73860d25d",
        "order": 1,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb9f42f8f6cda554",
        "type": "ui_group",
        "name": "Default",
        "tab": "f289406fec4bf103",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b98e8959a6c30e0",
        "type": "ui_group",
        "name": "Consumo ",
        "tab": "eefbea6e8dbb0b17",
        "order": 1,
        "disp": false,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "264021cecb64e1e7",
        "type": "ui_group",
        "name": "Datos de Interes",
        "tab": "eefbea6e8dbb0b17",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c7fce8cfeef3eb1",
        "type": "ui_group",
        "name": "Distribucion de Clases",
        "tab": "eefbea6e8dbb0b17",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e6efa4432b38006",
        "type": "ui_group",
        "name": "Correlación",
        "tab": "eefbea6e8dbb0b17",
        "order": 5,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce1e0a01b8a63972",
        "type": "ui_group",
        "name": "Histogramas",
        "tab": "eefbea6e8dbb0b17",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ffba43d73860d25d",
        "type": "ui_tab",
        "name": "Pagina 2",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f289406fec4bf103",
        "type": "ui_tab",
        "name": "Pagina 4",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eefbea6e8dbb0b17",
        "type": "ui_tab",
        "name": "Pagina 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]